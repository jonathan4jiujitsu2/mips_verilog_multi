# -*- coding: utf-8 -*-
"""
HFSS EXTRACTOR — attach to current active design
Outputs:
  HFSS_Extract_<project>_<design>_<timestamp>.json
  HFSS_Extract_<project>_<design>_<timestamp>_variables.csv
Run with your project open and the correct design selected in AEDT.
"""

import os, json, csv
from datetime import datetime
from pyaedt import Desktop, Hfss

EXPORT_CSV = True                       # set False if you don’t need the CSV

ts = datetime.now().strftime("%Y%m%d_%H%M%S")
desktop = Desktop(new_desktop=False)    # attach to running AEDT

hfss = Hfss()                           # one-liner → active design
if hfss is False:
    raise RuntimeError("No active HFSS design – select one in AEDT and re-run")

print("✓ Project:", hfss.project_name)
print("✓ Design :", hfss.design_name)

mdl = hfss.modeler

# ───────── collectors ───────── #
vars_dict = getattr(hfss.variable_manager, "variables",
            getattr(hfss.variable_manager, "properties", {}))
mat_list  = list(hfss.materials.material_keys)

def grab_objects():
    out = {}
    for h in mdl.objects:
        n = h.name
        if mdl.is_group(n):
            continue
        try:
            bbox = mdl.get_bounding_box(n)
        except Exception:
            bbox = []
        if not bbox and mdl.get_object_material(n, "") in ("", "Unknown"):
            continue
        out[n] = {
            "material"    : mdl.get_object_material(n, "") or "Unknown",
            "color"       : getattr(h, "color", None),
            "primitive"   : mdl.get_object_type(n) or "Unknown",
            "params"      : mdl.get_object_parameters(n) or {},
            "faces"       : mdl.get_object_faces(n) or [],
            "bounding_box": bbox,
            "history"     : mdl.get_object_history(n)
        }
    return out

def grab_bounds_ports():
    bnd, prt = {}, {}
    for bd in hfss.boundaries:
        entry = {"type": bd.type, "props": bd.props}
        try:
            entry["faces"] = hfss.boundaries.get_boundary_faces(bd.name)
        except Exception:
            entry["faces"] = []
        (prt if "port" in bd.type.lower() else bnd)[bd.name] = entry
    return bnd, prt

setups = {s.name: {"props": s.props,
                   "sweeps": {sw.name: sw.props for sw in s.sweeps}}
          for s in hfss.setups}

# ───── robust coordinate-system grab ─────
csm = getattr(mdl, "coordinate_system_manager",
      getattr(mdl, "CoordinateSystemManager", None))
coord_systems = {}
if csm:
    list_fn  = (csm.list_coordinate_systems if hasattr(csm, "list_coordinate_systems")
                else csm.ListCoordinateSystems)
    get_fn   = (csm.get_coordinate_system   if hasattr(csm, "get_coordinate_system")
                else csm.GetCoordinateSystem)
    for name in list_fn():
        try:
            coord_systems[name] = get_fn(name)
        except Exception:
            coord_systems[name] = {}

mesh_ops = {m: hfss.mesh.meshoperations[m].props
            for m in hfss.mesh.meshoperations}

# ───── package & save ─────
data = {
    "meta": {"timestamp": ts,
             "project": hfss.project_name,
             "design":  hfss.design_name,
             "aedt_version": desktop.release},
    "variables"      : vars_dict,
    "materials"      : mat_list,
    "objects"        : grab_objects(),
    "analysis_setups": setups,
    "coord_systems"  : coord_systems,
    "mesh_ops"       : mesh_ops,
    "history"        : hfss.odesign.GetModelHistory()
}
data["boundaries"], data["excitations"] = grab_bounds_ports()

base = f"HFSS_Extract_{hfss.project_name}_{hfss.design_name}_{ts}"
with open(base + ".json", "w", encoding="utf-8") as f:
    json.dump(data, f, indent=2, ensure_ascii=False, default=str)
print("JSON →", base + ".json")

if EXPORT_CSV:
    with open(base + "_variables.csv", "w", newline="", encoding="utf-8") as f:
        csv.writer(f).writerows([["Variable", "Value"], *vars_dict.items()])
    print("CSV  →", base + "_variables.csv")

hfss.release_desktop(close_projects=False, close_desktop=False)
print("✅  Extraction complete.")